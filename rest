#include <iostream>
#include <fstream>
#include <string>
#include <vector>

void split_to_int( std::vector<int> *draw, std::string line, char c ) {
	int buf = 0;

	for ( int i = 0; line[i]; i++ ) {
		if ( line[i] != c ) {
			buf *= 10;
			buf += line[i] - 48;
		} else {
			if ( i != 0 && i % 3 != 0 )
				(*draw).push_back( buf );
			buf = 0;
		}
	}
	(*draw).push_back( buf );
}

// int	check_rows( std::vector<int> shadow, std::vector<int> board, int b ) {
// 	for ( int i = 1; i <= 5; i++ )
// 		if ( shadow[i + i * b] && shadow[i + i * b + 1] && shadow[i + i * b + 2] && shadow[i + i * b + 3] && shadow[i + i * b + 4] )
// 			std::cout << board[i + i * b] << board[i + i * b + 1] << board[i + i * b + 2] << board[i + i * b + 3] << board[i + i * b + 4] << std::endl;
// 			// return board[i + i * b] + board[i + i * b + 1] + board[i + i * b + 2] + board[i + i * b + 3] + board[i + i * b + 4];
// 	return (0);
// }

// int	check_columns( std::vector<int> shadow, std::vector<int> board, int b ) {
// 	for ( int i = 0; i < 5; i++ )
// 		if ( shadow[i + i * b] && shadow[i + i * b + 1] && shadow[i + i * b + 2] && shadow[i + i * b + 3] && shadow[i + i * b + 4] )
// 			std::cout << board[i + i * b] << board[i + i * b + 1] << board[i + i * b + 2] << board[i + i * b + 3] << board[i + i * b + 4] << std::endl;
// 			// return board[i + i * b + 5] + board[i + i * b + 5] + board[i + i * b + 5] + board[i + i * b + 5] + board[i + i * b + 5];
// 	return (0);
// }

// int check_rows( std::vector<int> shadow, int i_b ) {
// 	int	check;
// 	int pos;

// 	for ( int i_r = 0; i_r < 5; i_r++ ) {
// 		check = 0;
// 		pos = ( i_b * 25 ) + ( i_r * 5 );
// 		for ( int i_c = 0; i_c < 5 ; i_c++ )
// 			if ( shadow[pos + i_c] )
// 				check++;
// 		if ( check == 5 )
// 			return i_r;	
// 	}
// 	return (-1);
// }

// int check_columns( std::vector<int> shadow, int i_b ) {
// 	int	check;
// 	int pos;

// 	for ( int i_r = 0; i_r < 5; i_r++ ) {
// 		check = 0;
// 		pos = ( i_b * 25 ) + i_r;
// 		for ( int i_c = 0; i_c < 5 ; i_c++ ) {
// 			if ( shadow[pos + (i_c * 5)] )
// 				check++;
// 			if ( check == 5 )
// 				return i_c;	
// 		}
// 	}
// 	return (-1);
// }

// int do_result_row( std::vector<int> board, int nbr, int row ) {
// 	for ( int i = 0; i < 5; i++ ) {
// 		if ( row != i )
// 			for ( int i = 0; i < 5; i++ )
// 				std::cout << board[nbr * 25 + (row * 5) + i] << " ";
// 		std::cout << std::endl;
// 	}
// 	return 0;
// }

// void print_board( std::vector<int> board, int nbr ){
// 	for ( int i_r = 0; i_r < 5; i_r++ ) {
// 		for ( int i_c = 0; i_c < 5; i_c++ )
// 			std::cout << board[nbr * 25 + (i_r * 5) + i_c] << " ";
// 		std::cout << std::endl;
// 	}
// }

// void check_nbr( std::vector<int> draw, std::vector<int> boards, int line_count ) {
// 	std::vector<int> shadow( boards.size(), 0 );
// 	int				board_count = line_count / 5;
// 	int				check = -1;

// 	for ( std::vector<int>::iterator it = draw.begin(); it < draw.end(); it++ ){
// 		for ( int i_b = 0; i_b < board_count; i_b++ )
// 			for ( int i_c = 0; i_c < 25; i_c++ )
// 				if ( *it == boards[i_c + i_b * i_c])
// 					shadow[i_c + i_b * i_c] = 1;
// 		for ( int i = 0; i < board_count; i++ ) {
// 			check = check_rows( shadow, i );
// 			// if ( check >= 0 ) {
// 			// 	print_board(board);
// 			// 	print_board(board);
// 			// }
// 			// check = check_columns( boards, boards, i );
// 			// if ( check )
// 			// 	std::cout << check << " * " << *it << " = " << check * (*it) << std::endl;
// 		}
// 	}
// 	for ( int i = 0; i < board_count; i++ ) {
// 		print_board(boards,board_count);
// 		print_board(shadow,board_count);
// 	}
// }

int	main( void ) {
	std::ifstream	input;
	std::string		line;
	std::vector<int> draw;
	std::vector<int> boards;
	int		line_count = 0;
	
	input.open( "input.txt" );
	if ( input.is_open() ) {
		getline( input, line );
		split_to_int( &draw, line, ',' );
		std::cout << std::endl;
		while ( getline( input, line ) )
			if ( line.length() ) {
				line_count++;
				split_to_int( &boards, line, ' ' );
			}
	} else
		return (1);
	check_nbr( draw, boards, line_count );
	input.close();
	return (0);
}
